{"version":3,"file":"static/js/702.89fd2b81.chunk.js","mappings":"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","sources":["components/ThreeDaysWeather/ThreeDaysWeather.styled.js","components/ThreeDaysWeather/ThreeDaysWeather.jsx","services/WeatherAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { IoMdTime } from 'react-icons/io';\nimport { GiWindsock, GiWindSlap } from 'react-icons/gi';\nimport { WiBarometer, WiRaindrops, WiHumidity } from 'react-icons/wi';\nimport { TbTemperatureCelsius } from 'react-icons/tb';\nimport { BsFillSunFill } from 'react-icons/bs';\n\nexport const Container = styled.div`\n  display: flex;\n  cursor: grab;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 448px;\n  height: 460px;\n  background: linear-gradient(\n    198deg,\n    rgb(255 255 255 / 8%) 0%,\n    rgb(255 255 255 / 12%) 100%\n  );\n  backdrop-filter: blur(25px);\n  border-radius: 30px;\n  @media (max-width: 450px) {\n    border-radius: 0;\n  }\n`;\n\nexport const ContentContainer = styled.div`\n  display: flex;\n\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\nexport const DetailsContainer = styled.div`\n  display: flex;\n  gap: 25px;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 500;\n  text-transform: uppercase;\n  font-size: 40px;\n  line-height: 50px;\n`;\n\nexport const DetailsTitle = styled.h3`\n  left: 40px;\n  position: absolute;\n  top: 60%;\n  width: 100%;\n\n  &::before {\n    content: '';\n    border-top: 1px solid #fff;\n    width: 82%;\n    position: absolute;\n    top: -10px;\n  }\n`;\n\nexport const TimeIcon = styled(IoMdTime)`\n  width: 30px;\n  height: 30px;\n`;\nexport const WindIcon = styled(GiWindsock)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const SunIcon = styled(BsFillSunFill)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const HumidityIcon = styled(WiHumidity)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const RaindropsIcon = styled(WiRaindrops)`\n  width: 50px;\n  height: 50px;\n`;\n\nexport const WindSlapIcon = styled(GiWindSlap)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const TempCelsiusIcon = styled(TbTemperatureCelsius)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const BarometerIcon = styled(WiBarometer)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const TextItem = styled.p`\n  display: flex;\n  font-weight: 500;\n  font-size: 16px;\n  align-items: center;\n  gap: 5px;\n`;\n","import { Notify } from 'notiflix';\nimport { useState, useEffect } from 'react';\n\nimport { fetchWeather } from 'services/WeatherAPI';\nimport Box from 'components/Box';\nimport Loader from 'components/Loader';\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Lazy, Navigation } from 'swiper';\nimport 'swiper/css';\nimport 'swiper/css/navigation';\nimport 'swiper/css/lazy';\n\nimport {\n  TimeIcon,\n  TextItem,\n  WindIcon,\n  TempCelsiusIcon,\n  RaindropsIcon,\n  HumidityIcon,\n  Container,\n  ContentContainer,\n  DetailsContainer,\n  Title,\n} from './ThreeDaysWeather.styled';\n\nconst ThreeDaysWeather = ({ query }) => {\n  const [cityName, setCityName] = useState([]);\n  const [forecastArr, setForecastArr] = useState([]);\n  const [preLoader, setPreLoader] = useState(false);\n  const { name } = cityName;\n\n  useEffect(() => {\n    const getFetchWeather = async () => {\n      setPreLoader(true);\n      try {\n        const data = await fetchWeather(query);\n        setCityName(data.location);\n        setForecastArr(data.forecast.forecastday);\n        setPreLoader(false);\n      } catch (error) {\n        console.log(error);\n        Notify.failure(\n          'Sorry, there are no city matching your search query. Please try again.'\n        );\n        setPreLoader(false);\n      }\n    };\n    if (!query) {\n      return;\n    }\n    getFetchWeather();\n  }, [query]);\n\n  return (\n    <Box as=\"div\">\n      {preLoader && <Loader />}\n      {name && (\n        <Swiper\n          modules={[Lazy, Navigation]}\n          slidesPerView={1}\n          initialSlide={0}\n          navigation={true}\n          loop={false}\n          grabCursor={true}\n          centeredSlides={true}\n          spaceBetween={30}\n        >\n          {forecastArr.map(\n            ({\n              day: {\n                condition,\n                mintemp_c,\n                maxtemp_c,\n                maxwind_kph,\n                avghumidity,\n                totalprecip_mm,\n              },\n              date,\n              date_epoch,\n            }) => {\n              return (\n                <SwiperSlide key={date_epoch}>\n                  <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    marginBottom=\"40px\"\n                  >\n                    <Container>\n                      <ContentContainer>\n                        <Title>{name}</Title>\n                        <TextItem>\n                          <TimeIcon /> {date}\n                        </TextItem>\n                        <Box\n                          display=\"flex\"\n                          flexDirection=\"column\"\n                          alignItems=\"center\"\n                        >\n                          <img src={condition.icon} alt=\"\" />\n                          <TextItem>{condition.text}</TextItem>\n                        </Box>\n                      </ContentContainer>\n                      <Box as=\"div\" display=\"flex\" style={{ gap: '15px' }}>\n                        <TextItem>\n                          Min: {mintemp_c}\n                          <TempCelsiusIcon />\n                        </TextItem>\n                        <TextItem>\n                          Max: {maxtemp_c}\n                          <TempCelsiusIcon />\n                        </TextItem>\n                      </Box>\n                      <DetailsContainer>\n                        <TextItem>\n                          <WindIcon /> max: {maxwind_kph}k/h\n                        </TextItem>\n                        <TextItem>\n                          <RaindropsIcon />\n                          {totalprecip_mm}mm\n                        </TextItem>\n                        <TextItem>\n                          <HumidityIcon />\n                          {avghumidity}%\n                        </TextItem>\n                      </DetailsContainer>\n                    </Container>\n                  </Box>\n                </SwiperSlide>\n              );\n            }\n          )}\n        </Swiper>\n      )}\n    </Box>\n  );\n};\n\nexport default ThreeDaysWeather;\n","import axios from 'axios';\n\nconst fetchWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '3' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nconst fetchOneDayWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '1' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nexport { fetchWeather, fetchOneDayWeather };\n"],"names":["Container","styled","ContentContainer","DetailsContainer","Title","TimeIcon","IoMdTime","WindIcon","GiWindsock","HumidityIcon","BsFillSunFill","WiHumidity","RaindropsIcon","WiRaindrops","TempCelsiusIcon","GiWindSlap","TbTemperatureCelsius","TextItem","WiBarometer","query","useState","cityName","setCityName","forecastArr","setForecastArr","preLoader","setPreLoader","name","useEffect","getFetchWeather","fetchWeather","data","location","forecast","forecastday","console","log","Notify","Box","as","Loader","modules","Lazy","Navigation","slidesPerView","initialSlide","navigation","loop","grabCursor","centeredSlides","spaceBetween","map","day","condition","mintemp_c","maxtemp_c","maxwind_kph","avghumidity","totalprecip_mm","date","date_epoch","display","justifyContent","marginBottom","flexDirection","alignItems","src","icon","alt","text","style","gap","options","method","url","params","q","days","headers","axios","response","fetchOneDayWeather"],"sourceRoot":""}