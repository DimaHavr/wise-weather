{"version":3,"file":"static/js/754.a98bca56.chunk.js","mappings":"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","sources":["components/RealTimeWeather/RealTimeWeather.styled.js","components/RealTimeWeather/RealTimeWeather.jsx","services/WeatherAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { IoMdTime } from 'react-icons/io';\nimport { GiWindsock, GiWindSlap } from 'react-icons/gi';\nimport { WiBarometer, WiRaindrops, WiHumidity } from 'react-icons/wi';\nimport { TbTemperatureCelsius } from 'react-icons/tb';\nimport { BsFillSunFill } from 'react-icons/bs';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 448px;\n  height: 460px;\n  background: linear-gradient(\n    198deg,\n    rgb(255 255 255 / 8%) 0%,\n    rgb(255 255 255 / 12%) 100%\n  );\n  backdrop-filter: blur(25px);\n  border-radius: 30px;\n  @media (max-width: 450px) {\n    border-radius: 0;\n  }\n`;\n\nexport const ContentContainer = styled.div`\n  display: flex;\n\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\nexport const DetailsContainer = styled.div`\n  display: flex;\n  gap: 25px;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 500;\n  text-transform: uppercase;\n  font-size: 40px;\n  line-height: 50px;\n`;\n\nexport const TextItem = styled.p`\n  display: flex;\n  font-weight: 500;\n  font-size: 16px;\n  align-items: center;\n  gap: 5px;\n`;\n\nexport const TimeIcon = styled(IoMdTime)`\n  width: 30px;\n  height: 30px;\n`;\nexport const WindIcon = styled(GiWindsock)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const SunIcon = styled(BsFillSunFill)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const HumidityIcon = styled(WiHumidity)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const RaindropsIcon = styled(WiRaindrops)`\n  width: 50px;\n  height: 50px;\n`;\n\nexport const WindSlapIcon = styled(GiWindSlap)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const TempCelsiusIcon = styled(TbTemperatureCelsius)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const BarometerIcon = styled(WiBarometer)`\n  width: 30px;\n  height: 30px;\n`;\n","import { Notify } from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { fetchWeather } from 'services/WeatherAPI';\nimport Box from 'components/Box';\nimport Loader from 'components/Loader';\n\nimport {\n  TimeIcon,\n  TextItem,\n  WindIcon,\n  TempCelsiusIcon,\n  BarometerIcon,\n  RaindropsIcon,\n  HumidityIcon,\n  SunIcon,\n  Container,\n  ContentContainer,\n  DetailsContainer,\n  Title,\n} from './RealTimeWeather.styled';\n\nconst RealTimeWeather = ({ query }) => {\n  const [cityName, setCityName] = useState([]);\n  const [forecastArr, setForecastArr] = useState([]);\n  const [preLoader, setPreLoader] = useState(false);\n  const { name, localtime } = cityName;\n  const {\n    condition,\n    wind_kph,\n    temp_c,\n    pressure_mb,\n    precip_mm,\n    uv,\n    humidity,\n    feelslike_c,\n  } = forecastArr;\n\n  useEffect(() => {\n    const getFetchWeather = async () => {\n      setPreLoader(true);\n      try {\n        const data = await fetchWeather(query);\n        setCityName(data.location);\n        setForecastArr(data.current);\n        setPreLoader(false);\n      } catch (error) {\n        console.log(error);\n        Notify.failure(\n          'Sorry, there are no city matching your search query. Please try again.'\n        );\n        setPreLoader(false);\n      }\n    };\n    if (!query) {\n      return;\n    }\n    getFetchWeather();\n  }, [query]);\n\n  return (\n    <Box as=\"div\">\n      {preLoader && <Loader />}\n      {name && (\n        <Box display=\"flex\" justifyContent=\"center\" paddingBottom=\"30px\">\n          <Container>\n            <ContentContainer>\n              <Title>{name}</Title>\n              <TextItem>\n                <TimeIcon /> {localtime}\n              </TextItem>\n              <Box display=\"flex\">\n                <img src={condition.icon} alt=\"\" />\n                <TextItem>\n                  {temp_c} <TempCelsiusIcon />\n                </TextItem>\n              </Box>\n              <TextItem>{condition.text}</TextItem>\n            </ContentContainer>\n            <DetailsContainer>\n              <TextItem>\n                <WindIcon /> {wind_kph}k/h\n              </TextItem>\n              <TextItem>\n                <BarometerIcon />\n                {pressure_mb}hPa\n              </TextItem>\n              <TextItem>\n                <RaindropsIcon />\n                {precip_mm}mm\n              </TextItem>\n              <TextItem>\n                <HumidityIcon />\n                {humidity}%\n              </TextItem>\n              <TextItem>\n                RealFeel: {feelslike_c} <TempCelsiusIcon />\n              </TextItem>\n              <TextItem>\n                <SunIcon />\n                {uv} of 10\n              </TextItem>\n            </DetailsContainer>\n          </Container>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default RealTimeWeather;\n","import axios from 'axios';\n\nconst fetchWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '3' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nconst fetchOneDayWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '1' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nexport { fetchWeather, fetchOneDayWeather };\n"],"names":["Container","styled","ContentContainer","DetailsContainer","Title","TextItem","TimeIcon","IoMdTime","WindIcon","GiWindsock","SunIcon","BsFillSunFill","HumidityIcon","WiHumidity","RaindropsIcon","WiRaindrops","TempCelsiusIcon","GiWindSlap","TbTemperatureCelsius","BarometerIcon","WiBarometer","query","useState","cityName","setCityName","forecastArr","setForecastArr","preLoader","setPreLoader","name","localtime","condition","wind_kph","temp_c","pressure_mb","precip_mm","uv","humidity","feelslike_c","useEffect","getFetchWeather","fetchWeather","data","location","current","console","log","Notify","Box","as","Loader","display","justifyContent","paddingBottom","src","icon","alt","text","options","method","url","params","q","days","headers","axios","response","fetchOneDayWeather"],"sourceRoot":""}