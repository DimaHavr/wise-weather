{"version":3,"file":"static/js/283.1b9baa27.chunk.js","mappings":"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","sources":["components/HourlyWeather/HourlyWeather.styled.js","components/HourlyWeather/HourlyWeather.jsx","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","services/WeatherAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { IoMdTime } from 'react-icons/io';\nimport { GiWindsock, GiWindSlap } from 'react-icons/gi';\nimport { WiBarometer, WiRaindrops, WiHumidity } from 'react-icons/wi';\nimport { TbTemperatureCelsius } from 'react-icons/tb';\nimport { BsFillSunFill } from 'react-icons/bs';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  width: 448px;\n  height: 460px;\n  background: linear-gradient(\n    198deg,\n    rgb(255 255 255 / 8%) 0%,\n    rgb(255 255 255 / 12%) 100%\n  );\n  backdrop-filter: blur(25px);\n  border-radius: 30px;\n  @media (max-width: 450px) {\n    border-radius: 0;\n  }\n`;\n\nexport const ContentContainer = styled.div`\n  display: flex;\n  cursor: pointer;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\nexport const DetailsContainer = styled.div`\n  display: flex;\n  gap: 25px;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  overflow: hidden;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 500;\n  text-transform: uppercase;\n  font-size: 40px;\n  line-height: 50px;\n`;\n\nexport const DetailsTitle = styled.h3`\n  left: 40px;\n  position: absolute;\n  top: 60%;\n  width: 100%;\n\n  &::before {\n    content: '';\n    border-top: 1px solid #fff;\n    width: 82%;\n    position: absolute;\n    top: -10px;\n  }\n`;\n\nexport const TimeIcon = styled(IoMdTime)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const WindIcon = styled(GiWindsock)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const SunIcon = styled(BsFillSunFill)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const HumidityIcon = styled(WiHumidity)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const RaindropsIcon = styled(WiRaindrops)`\n  width: 50px;\n  height: 50px;\n`;\n\nexport const WindSlapIcon = styled(GiWindSlap)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const TempCelsiusIcon = styled(TbTemperatureCelsius)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const BarometerIcon = styled(WiBarometer)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const TextItem = styled.p`\n  display: flex;\n  font-weight: 500;\n  font-size: 16px;\n  align-items: center;\n  gap: 5px;\n`;\n","import { Notify } from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchOneDayWeather } from 'services/WeatherAPI';\nimport Box from 'components/Box';\nimport SearchBox from 'components/SearchBox';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\nimport { Carousel } from 'react-responsive-carousel';\nimport Loader from 'components/Loader';\n\nimport {\n  TimeIcon,\n  TextItem,\n  WindIcon,\n  TempCelsiusIcon,\n  BarometerIcon,\n  RaindropsIcon,\n  HumidityIcon,\n  SunIcon,\n  Container,\n  ContentContainer,\n  DetailsContainer,\n  Title,\n} from './HourlyWeather.styled';\n\nconst HourlyWeather = () => {\n  const [location, setLocation] = useState([]);\n  const [currentCity, setCurrentCity] = useState([]);\n  const [preLoader, setPreLoader] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const cityName = searchParams.get('query') ?? '';\n  const { name } = location;\n\n  useEffect(() => {\n    const getFetchWeather = async () => {\n      setPreLoader(true);\n      try {\n        const data = await fetchOneDayWeather(cityName);\n        setLocation(data.location);\n        setCurrentCity(data.forecast.forecastday);\n        setPreLoader(false);\n      } catch (error) {\n        console.log(error);\n        Notify.failure(\n          'Sorry, there are no city matching your search query. Please try again.'\n        );\n        setPreLoader(false);\n      }\n    };\n    if (!cityName) {\n      return;\n    }\n    getFetchWeather();\n  }, [cityName]);\n\n  const handleInputSubmit = value => {\n    setSearchParams(value !== '' ? { query: value } : '');\n    setCurrentCity([]);\n    setLocation([]);\n  };\n  const renderSlides = currentCity.map(({ hour, date }, index) => {\n    return hour.map(\n      ({\n        time,\n        condition,\n        temp_c,\n        wind_kph,\n        precip_mm,\n        humidity,\n        pressure_mb,\n        uv,\n        feelslike_c,\n      }) => {\n        return (\n          <Box\n            key={index}\n            display=\"flex\"\n            justifyContent=\"center\"\n            marginBottom=\"40px\"\n          >\n            <Container>\n              <ContentContainer>\n                <Title>{name}</Title>\n                <ContentContainer>\n                  <TextItem>\n                    <TimeIcon /> {time}\n                  </TextItem>\n                  <Box display=\"flex\">\n                    <img src={condition.icon} alt=\"\" />\n                    <TextItem>\n                      {temp_c}\n                      <TempCelsiusIcon />\n                    </TextItem>\n                  </Box>\n                </ContentContainer>\n                <DetailsContainer>\n                  <TextItem>\n                    <WindIcon /> {wind_kph}k/h\n                  </TextItem>\n                  <TextItem>\n                    <BarometerIcon />\n                    {pressure_mb}hPa\n                  </TextItem>\n                  <TextItem>\n                    <RaindropsIcon />\n                    {precip_mm}mm\n                  </TextItem>\n                  <TextItem>\n                    <HumidityIcon />\n                    {humidity}%\n                  </TextItem>\n                  <TextItem>\n                    RealFeel: {feelslike_c} <TempCelsiusIcon />\n                  </TextItem>\n                  <TextItem>\n                    <SunIcon />\n                    {uv} of 10\n                  </TextItem>\n                </DetailsContainer>\n              </ContentContainer>\n            </Container>\n          </Box>\n        );\n      }\n    );\n  });\n\n  return (\n    <Box as=\"div\">\n      <SearchBox onSubmit={handleInputSubmit} />\n      {preLoader && <Loader />}\n      {name && (\n        <Carousel\n          showThumbs={false}\n          emulateTouch={true}\n          swipeable={true}\n          showStatus={false}\n          showIndicators={false}\n          showArrows={true}\n        >\n          {renderSlides}\n        </Carousel>\n      )}\n    </Box>\n  );\n};\n\nexport default HourlyWeather;\n","import styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const Wrapper = styled.form`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  width: 100%;\n  padding: 20px;\n  position: relative;\n  z-index: 1;\n`;\n\nexport const Input = styled.input`\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  align-items: center;\n  width: 300px;\n\n  letter-spacing: 1.4px;\n  color: rgba(255, 255, 255, 0.621);\n  border-color: rgba(255, 255, 255, 0.679);\n  cursor: pointer;\n  background-color: rgba(0, 0, 0, 0.25);\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n\n  @media screen and (max-width: 767px) {\n    max-width: 200px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background: none;\n  color: rgba(255, 255, 255, 0.621);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border: none;\n  @keyframes btn-animation {\n    0% {\n      transform: scale(1.05);\n    }\n    20% {\n      transform: scale(1.1);\n    }\n    100% {\n      transform: scale(1.13);\n    }\n  }\n  :active {\n    animation: btn-animation 1s ease-out;\n  }\n`;\n\nexport const SearchIcon = styled(BsSearch)`\n  width: 30px;\n  height: 30px;\n`;\n","import { useState } from 'react';\nimport { Wrapper, Input, Button, SearchIcon } from './SearchBox.styled';\nimport { Notify } from 'notiflix';\n\nexport const SearchBox = ({ onSubmit }) => {\n  const [cityName, setCityName] = useState('');\n\n  const handleSubmit = event => {\n    if (cityName.trim() === '') {\n      Notify.failure(\n        'Sorry, there are no city name matching your search query. Please try again.'\n      );\n    }\n    event.preventDefault();\n    onSubmit(cityName);\n    onReset(event);\n  };\n\n  const onChangeInput = event => {\n    setCityName(event.target.value);\n  };\n\n  const onReset = event => {\n    setCityName('');\n    event.target.reset();\n  };\n\n  return (\n    <Wrapper onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        placeholder=\"Search city...\"\n        value={cityName}\n        onChange={onChangeInput}\n      />\n      <Button type=\"submit\">\n        <SearchIcon />\n      </Button>\n    </Wrapper>\n  );\n};\nexport default SearchBox;\n","import axios from 'axios';\n\n// async function fetchMovies() {\n//   const url = `https://api.themoviedb.org/3/trending/all/day?api_key=b1c3a2089fd706f08956c6d7f55cc574`;\n\n//   const response = await axios.get(url);\n//   return response.data;\n// }\n\nconst fetchWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '3' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nconst fetchOneDayWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '1' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nexport { fetchWeather, fetchOneDayWeather };\n"],"names":["Container","styled","ContentContainer","DetailsContainer","Title","TimeIcon","IoMdTime","WindIcon","GiWindsock","SunIcon","BsFillSunFill","HumidityIcon","WiHumidity","RaindropsIcon","WiRaindrops","TempCelsiusIcon","GiWindSlap","TbTemperatureCelsius","BarometerIcon","WiBarometer","TextItem","useState","location","setLocation","currentCity","setCurrentCity","preLoader","setPreLoader","useSearchParams","searchParams","setSearchParams","cityName","get","name","useEffect","getFetchWeather","fetchOneDayWeather","data","forecast","forecastday","console","log","Notify","renderSlides","map","index","hour","date","time","condition","temp_c","wind_kph","precip_mm","humidity","pressure_mb","uv","feelslike_c","Box","display","justifyContent","marginBottom","src","icon","alt","as","SearchBox","onSubmit","value","query","Loader","showThumbs","emulateTouch","swipeable","showStatus","showIndicators","showArrows","Wrapper","Input","Button","SearchIcon","BsSearch","setCityName","onReset","event","target","reset","trim","preventDefault","type","placeholder","onChange","fetchWeather","options","method","url","params","q","days","headers","axios","response"],"sourceRoot":""}