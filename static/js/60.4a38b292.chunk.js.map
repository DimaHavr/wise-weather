{"version":3,"file":"static/js/60.4a38b292.chunk.js","mappings":"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","sources":["components/HourlyWeather/HourlyWeather.styled.js","components/HourlyWeather/HourlyWeather.jsx","services/WeatherAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { IoMdTime } from 'react-icons/io';\nimport { GiWindsock, GiWindSlap } from 'react-icons/gi';\nimport { WiBarometer, WiRaindrops, WiHumidity } from 'react-icons/wi';\nimport { TbTemperatureCelsius } from 'react-icons/tb';\nimport { BsFillSunFill } from 'react-icons/bs';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  width: 448px;\n  height: 460px;\n  background: linear-gradient(\n    198deg,\n    rgb(255 255 255 / 8%) 0%,\n    rgb(255 255 255 / 12%) 100%\n  );\n  backdrop-filter: blur(25px);\n  border-radius: 30px;\n  @media (max-width: 450px) {\n    border-radius: 0;\n  }\n`;\n\nexport const ContentContainer = styled.div`\n  display: flex;\n  cursor: grab;\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\nexport const DetailsContainer = styled.div`\n  display: flex;\n  gap: 25px;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  overflow: hidden;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 500;\n  text-transform: uppercase;\n  font-size: 40px;\n  line-height: 50px;\n`;\n\nexport const DetailsTitle = styled.h3`\n  left: 40px;\n  position: absolute;\n  top: 60%;\n  width: 100%;\n\n  &::before {\n    content: '';\n    border-top: 1px solid #fff;\n    width: 82%;\n    position: absolute;\n    top: -10px;\n  }\n`;\n\nexport const TimeIcon = styled(IoMdTime)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const WindIcon = styled(GiWindsock)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const SunIcon = styled(BsFillSunFill)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const HumidityIcon = styled(WiHumidity)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const RaindropsIcon = styled(WiRaindrops)`\n  width: 50px;\n  height: 50px;\n`;\n\nexport const WindSlapIcon = styled(GiWindSlap)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const TempCelsiusIcon = styled(TbTemperatureCelsius)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const BarometerIcon = styled(WiBarometer)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const TextItem = styled.p`\n  display: flex;\n  font-weight: 500;\n  font-size: 16px;\n  align-items: center;\n  gap: 5px;\n`;\n","import { Notify } from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { fetchOneDayWeather } from 'services/WeatherAPI';\nimport Box from 'components/Box';\nimport Loader from 'components/Loader';\n\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Lazy, Navigation } from 'swiper';\nimport 'swiper/css';\nimport 'swiper/css/navigation';\nimport 'swiper/css/lazy';\n\nimport {\n  TimeIcon,\n  TextItem,\n  WindIcon,\n  TempCelsiusIcon,\n  BarometerIcon,\n  RaindropsIcon,\n  HumidityIcon,\n  SunIcon,\n  Container,\n  ContentContainer,\n  DetailsContainer,\n  Title,\n} from './HourlyWeather.styled';\n\nconst HourlyWeather = ({ query }) => {\n  const [cityName, setCityName] = useState([]);\n  const [preLoader, setPreLoader] = useState(false);\n  const [forecastArr, setForecastArr] = useState(() => {\n    return JSON.parse(window.localStorage.getItem('forecastArr')) ?? [];\n  });\n  const { name } = cityName;\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(forecastArr));\n  }, [forecastArr]);\n\n  useEffect(() => {\n    const getFetchWeather = async () => {\n      setPreLoader(true);\n      try {\n        const data = await fetchOneDayWeather(query);\n        setCityName(data.location);\n        setForecastArr(data.forecast.forecastday);\n        setPreLoader(false);\n      } catch (error) {\n        console.log(error);\n        Notify.failure(\n          'Sorry, there are no city matching your search query. Please try again.'\n        );\n        setPreLoader(false);\n      }\n    };\n    if (!query) {\n      return;\n    }\n    getFetchWeather();\n  }, [query]);\n\n  return (\n    <Box as=\"div\">\n      {preLoader && <Loader />}\n      {name && (\n        <Swiper\n          modules={[Lazy, Navigation]}\n          slidesPerView={1}\n          initialSlide={0}\n          navigation={true}\n          loop\n          grabCursor={true}\n          centeredSlides={true}\n          spaceBetween={30}\n        >\n          {forecastArr.map(({ hour }) => {\n            return hour.map(\n              ({\n                time,\n                condition,\n                temp_c,\n                wind_kph,\n                precip_mm,\n                humidity,\n                pressure_mb,\n                uv,\n                feelslike_c,\n                time_epoch,\n              }) => {\n                return (\n                  <SwiperSlide key={time_epoch}>\n                    <Box\n                      display=\"flex\"\n                      justifyContent=\"center\"\n                      marginBottom=\"40px\"\n                    >\n                      <Container>\n                        <ContentContainer>\n                          <Title>{name}</Title>\n                          <ContentContainer>\n                            <TextItem>\n                              <TimeIcon /> {time}\n                            </TextItem>\n                            <Box display=\"flex\">\n                              <img src={condition.icon} alt=\"\" />\n                              <TextItem>\n                                {temp_c}\n                                <TempCelsiusIcon />\n                              </TextItem>\n                            </Box>\n                          </ContentContainer>\n                          <DetailsContainer>\n                            <TextItem>\n                              <WindIcon /> {wind_kph}k/h\n                            </TextItem>\n                            <TextItem>\n                              <BarometerIcon />\n                              {pressure_mb}hPa\n                            </TextItem>\n                            <TextItem>\n                              <RaindropsIcon />\n                              {precip_mm}mm\n                            </TextItem>\n                            <TextItem>\n                              <HumidityIcon />\n                              {humidity}%\n                            </TextItem>\n                            <TextItem>\n                              RealFeel: {feelslike_c} <TempCelsiusIcon />\n                            </TextItem>\n                            <TextItem>\n                              <SunIcon />\n                              {uv} of 10\n                            </TextItem>\n                          </DetailsContainer>\n                        </ContentContainer>\n                      </Container>\n                    </Box>\n                  </SwiperSlide>\n                );\n              }\n            );\n          })}\n        </Swiper>\n      )}\n    </Box>\n  );\n};\n\nexport default HourlyWeather;\n","import axios from 'axios';\n\nconst fetchWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '3' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nconst fetchOneDayWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '1' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nexport { fetchWeather, fetchOneDayWeather };\n"],"names":["Container","styled","ContentContainer","DetailsContainer","Title","TimeIcon","IoMdTime","WindIcon","GiWindsock","SunIcon","BsFillSunFill","HumidityIcon","WiHumidity","RaindropsIcon","WiRaindrops","TempCelsiusIcon","GiWindSlap","TbTemperatureCelsius","BarometerIcon","WiBarometer","TextItem","query","useState","cityName","setCityName","preLoader","setPreLoader","JSON","parse","window","localStorage","getItem","forecastArr","setForecastArr","name","useEffect","setItem","stringify","getFetchWeather","fetchOneDayWeather","data","location","forecast","forecastday","console","log","Notify","Box","as","Loader","modules","Lazy","Navigation","slidesPerView","initialSlide","navigation","loop","grabCursor","centeredSlides","spaceBetween","map","hour","time","condition","temp_c","wind_kph","precip_mm","humidity","pressure_mb","uv","feelslike_c","time_epoch","display","justifyContent","marginBottom","src","icon","alt","fetchWeather","options","method","url","params","q","days","headers","axios","response"],"sourceRoot":""}