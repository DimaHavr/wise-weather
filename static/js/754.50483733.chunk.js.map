{"version":3,"file":"static/js/754.50483733.chunk.js","mappings":"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","sources":["components/RealTimeWeather/RealTimeWeather.styled.js","components/RealTimeWeather/RealTimeWeather.jsx","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","services/WeatherAPI.js"],"sourcesContent":["import styled from 'styled-components';\nimport { IoMdTime } from 'react-icons/io';\nimport { GiWindsock, GiWindSlap } from 'react-icons/gi';\nimport { WiBarometer, WiRaindrops, WiHumidity } from 'react-icons/wi';\nimport { TbTemperatureCelsius } from 'react-icons/tb';\nimport { BsFillSunFill } from 'react-icons/bs';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-evenly;\n  width: 448px;\n  height: 460px;\n  background: linear-gradient(\n    198deg,\n    rgb(255 255 255 / 8%) 0%,\n    rgb(255 255 255 / 12%) 100%\n  );\n  backdrop-filter: blur(25px);\n  border-radius: 30px;\n  @media (max-width: 450px) {\n    border-radius: 0;\n  }\n`;\n\nexport const ContentContainer = styled.div`\n  display: flex;\n\n  gap: 10px;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\nexport const DetailsContainer = styled.div`\n  display: flex;\n  gap: 25px;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n`;\n\nexport const Title = styled.h2`\n  font-weight: 500;\n  text-transform: uppercase;\n  font-size: 40px;\n  line-height: 50px;\n`;\n\nexport const TextItem = styled.p`\n  display: flex;\n  font-weight: 500;\n  font-size: 16px;\n  align-items: center;\n  gap: 5px;\n`;\n\nexport const TimeIcon = styled(IoMdTime)`\n  width: 30px;\n  height: 30px;\n`;\nexport const WindIcon = styled(GiWindsock)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const SunIcon = styled(BsFillSunFill)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const HumidityIcon = styled(WiHumidity)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const RaindropsIcon = styled(WiRaindrops)`\n  width: 50px;\n  height: 50px;\n`;\n\nexport const WindSlapIcon = styled(GiWindSlap)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const TempCelsiusIcon = styled(TbTemperatureCelsius)`\n  width: 30px;\n  height: 30px;\n`;\n\nexport const BarometerIcon = styled(WiBarometer)`\n  width: 30px;\n  height: 30px;\n`;\n","import { Notify } from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchWeather } from 'services/WeatherAPI';\nimport Box from 'components/Box';\nimport SearchBox from 'components/SearchBox';\nimport Loader from 'components/Loader';\n\nimport {\n  TimeIcon,\n  TextItem,\n  WindIcon,\n  TempCelsiusIcon,\n  BarometerIcon,\n  RaindropsIcon,\n  HumidityIcon,\n  SunIcon,\n  Container,\n  ContentContainer,\n  DetailsContainer,\n  Title,\n} from './RealTimeWeather.styled';\n\nconst RealTimeWeather = () => {\n  const [location, setLocation] = useState([]);\n  const [currentCity, setCurrentCity] = useState([]);\n  const [preLoader, setPreLoader] = useState(false);\n  const { name, localtime } = location;\n  const [searchParams, setSearchParams] = useSearchParams();\n  const cityName = searchParams.get('query') ?? '';\n\n  const {\n    condition,\n    wind_kph,\n    temp_c,\n    pressure_mb,\n    precip_mm,\n    uv,\n    humidity,\n    feelslike_c,\n  } = currentCity;\n\n  useEffect(() => {\n    const getFetchWeather = async () => {\n      setPreLoader(true);\n      try {\n        const data = await fetchWeather(cityName);\n        setLocation(data.location);\n        setCurrentCity(data.current);\n        setPreLoader(false);\n      } catch (error) {\n        console.log(error);\n        Notify.failure(\n          'Sorry, there are no city matching your search query. Please try again.'\n        );\n        setPreLoader(false);\n      }\n    };\n    if (!cityName) {\n      return;\n    }\n    getFetchWeather();\n  }, [cityName]);\n\n  const handleInputSubmit = value => {\n    setSearchParams(value !== '' ? { query: value } : '');\n    setCurrentCity([]);\n    setLocation([]);\n  };\n\n  return (\n    <Box as=\"div\">\n      <SearchBox onSubmit={handleInputSubmit} />\n      {preLoader && <Loader />}\n      {name && (\n        <Box display=\"flex\" justifyContent=\"center\" paddingBottom=\"30px\">\n          <Container>\n            <ContentContainer>\n              <Title>{name}</Title>\n              <TextItem>\n                <TimeIcon /> {localtime}\n              </TextItem>\n              <Box display=\"flex\">\n                <img src={condition.icon} alt=\"\" />\n                <TextItem>\n                  {temp_c} <TempCelsiusIcon />\n                </TextItem>\n              </Box>\n              <TextItem>{condition.text}</TextItem>\n            </ContentContainer>\n            <DetailsContainer>\n              <TextItem>\n                <WindIcon /> {wind_kph}k/h\n              </TextItem>\n              <TextItem>\n                <BarometerIcon />\n                {pressure_mb}hPa\n              </TextItem>\n              <TextItem>\n                <RaindropsIcon />\n                {precip_mm}mm\n              </TextItem>\n              <TextItem>\n                <HumidityIcon />\n                {humidity}%\n              </TextItem>\n              <TextItem>\n                RealFeel: {feelslike_c} <TempCelsiusIcon />\n              </TextItem>\n              <TextItem>\n                <SunIcon />\n                {uv} of 10\n              </TextItem>\n            </DetailsContainer>\n          </Container>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default RealTimeWeather;\n","import styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\n\nexport const Wrapper = styled.form`\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  width: 100%;\n  padding: 20px;\n  position: relative;\n  z-index: 1;\n`;\n\nexport const Input = styled.input`\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n  align-items: center;\n  width: 300px;\n\n  letter-spacing: 1.4px;\n  color: rgba(255, 255, 255, 0.621);\n  border-color: rgba(255, 255, 255, 0.679);\n  cursor: pointer;\n  background-color: rgba(0, 0, 0, 0.25);\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n\n  @media screen and (max-width: 767px) {\n    max-width: 200px;\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  background: none;\n  color: rgba(255, 255, 255, 0.621);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border: none;\n  @keyframes btn-animation {\n    0% {\n      transform: scale(1.05);\n    }\n    20% {\n      transform: scale(1.1);\n    }\n    100% {\n      transform: scale(1.13);\n    }\n  }\n  :active {\n    animation: btn-animation 1s ease-out;\n  }\n`;\n\nexport const SearchIcon = styled(BsSearch)`\n  width: 30px;\n  height: 30px;\n`;\n","import { useState } from 'react';\nimport { Wrapper, Input, Button, SearchIcon } from './SearchBox.styled';\nimport { Notify } from 'notiflix';\n\nexport const SearchBox = ({ onSubmit }) => {\n  const [cityName, setCityName] = useState('');\n\n  const handleSubmit = event => {\n    if (cityName.trim() === '') {\n      Notify.failure(\n        'Sorry, there are no city name matching your search query. Please try again.'\n      );\n    }\n    event.preventDefault();\n    onSubmit(cityName);\n    onReset(event);\n  };\n\n  const onChangeInput = event => {\n    setCityName(event.target.value);\n  };\n\n  const onReset = event => {\n    setCityName('');\n    event.target.reset();\n  };\n\n  return (\n    <Wrapper onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        placeholder=\"Search city...\"\n        value={cityName}\n        onChange={onChangeInput}\n      />\n      <Button type=\"submit\">\n        <SearchIcon />\n      </Button>\n    </Wrapper>\n  );\n};\nexport default SearchBox;\n","import axios from 'axios';\n\n// async function fetchMovies() {\n//   const url = `https://api.themoviedb.org/3/trending/all/day?api_key=b1c3a2089fd706f08956c6d7f55cc574`;\n\n//   const response = await axios.get(url);\n//   return response.data;\n// }\n\nconst fetchWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '3' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nconst fetchOneDayWeather = async cityName => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${cityName}`, days: '1' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nexport { fetchWeather, fetchOneDayWeather };\n"],"names":["Container","styled","ContentContainer","DetailsContainer","Title","TextItem","TimeIcon","IoMdTime","WindIcon","GiWindsock","SunIcon","BsFillSunFill","HumidityIcon","WiHumidity","RaindropsIcon","WiRaindrops","TempCelsiusIcon","GiWindSlap","TbTemperatureCelsius","BarometerIcon","WiBarometer","useState","location","setLocation","currentCity","setCurrentCity","preLoader","setPreLoader","name","localtime","useSearchParams","searchParams","setSearchParams","cityName","get","condition","wind_kph","temp_c","pressure_mb","precip_mm","uv","humidity","feelslike_c","useEffect","getFetchWeather","fetchWeather","data","current","console","log","Notify","Box","as","SearchBox","onSubmit","value","query","Loader","display","justifyContent","paddingBottom","src","icon","alt","text","Wrapper","Input","Button","SearchIcon","BsSearch","setCityName","onReset","event","target","reset","trim","preventDefault","type","placeholder","onChange","options","method","url","params","q","days","headers","axios","response","fetchOneDayWeather"],"sourceRoot":""}