{"version":3,"file":"static/js/220.27ee3456.chunk.js","mappings":"2PAEMA,EAAY,mCAAG,WAAMC,GAAN,gFACbC,EAAU,CACdC,OAAQ,MACRC,IAAK,sDACLC,OAAQ,CAAEC,EAAE,GAAD,OAAKL,GAASM,KAAM,KAC/BC,QAAS,CACP,iBAAkB,qDAClB,kBAAmB,kCAPJ,UAWIC,EAAAA,EAAAA,GAAMP,GAXV,cAWbQ,EAXa,yBAYZA,EAASC,MAZG,2CAAH,sD,gFCKZC,GAAgBC,EAAAA,EAAAA,OAAK,kBAAM,6DAAN,IACrBC,GAAmBD,EAAAA,EAAAA,OAAK,kBAAM,8DAAN,IACxBE,GAAkBF,EAAAA,EAAAA,OAAK,kBAAM,qDAAN,IAoF7B,SAASG,EAASC,GAChB,IAAQC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,GAAnC,OAA6CJ,EAA7C,GAEA,OACE,gCACEK,KAAK,WACLC,OAAQJ,IAAUC,EAClBI,GAAE,0BAAqBJ,GACvB,uCAA+BA,IAC3BC,GALN,aAOGF,IAAUC,IAAS,SAACK,EAAA,EAAD,CAAKC,GAAI,CAAEC,EAAG,GAAd,SAAoBT,MAG7C,CAED,MAlGA,YAAqC,IAAVjB,EAAS,EAATA,MACzB,GAA0B2B,EAAAA,EAAAA,UAAS,GAAnC,eAAOT,EAAP,KAAcU,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAAsCH,EAAAA,EAAAA,UAAS,IAA/C,eAAOI,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,2FACtBJ,GAAa,GADS,kBAGD/B,EAAaC,GAHZ,OAGdU,EAHc,OAIpBsB,EAAetB,GACfoB,GAAa,GALO,gDAOpBK,QAAQC,IAAR,MACAC,EAAAA,OAAAA,QACE,0EAEFP,GAAa,GACbE,EAAe,IACfM,aAAaC,QAbO,yDAAH,qDAiBjBvC,GACFkC,GAEH,GAAE,CAAClC,IAEJ,IAIMwC,EAAY,CAChBC,MAAO,SAGT,OACE,UAACjB,EAAA,EAAD,YACE,SAACA,EAAA,EAAD,CACEkB,GAAG,MACHjB,GAAI,CACFkB,aAAc,EACdC,YAAa,WAEfC,MAAO,CACLJ,MAAO,QACPK,QAAS,OACTC,eAAgB,SAChBC,cAAe,QAVnB,UAaE,UAACC,EAAA,EAAD,CACE/B,MAAOA,EACPgC,SAzBgB,SAACC,EAAOC,GAC9BxB,EAASwB,EACV,EAwBO,aAAW,qBAHb,WAKE,SAACC,EAAA,EAAD,CAAKR,MAAOL,EAAWc,MAAM,eAC7B,SAACD,EAAA,EAAD,CAAKR,MAAOL,EAAWc,MAAM,iBAC7B,SAACD,EAAA,EAAD,CAAKR,MAAOL,EAAWc,MAAM,oBAGhCzB,GACC,SAAC0B,EAAA,EAAD,IAEAxB,EAAYyB,WACV,UAAC,EAAAC,SAAD,CAAUC,UAAU,SAACH,EAAA,EAAD,IAApB,WACE,SAACxC,EAAD,CAAUG,MAAOA,EAAOC,MAAO,EAA/B,UACE,SAACL,EAAD,CAAiBiB,YAAaA,OAEhC,SAAChB,EAAD,CAAUG,MAAOA,EAAOC,MAAO,EAA/B,UACE,SAACR,EAAD,CAAeoB,YAAaA,OAE9B,SAAChB,EAAD,CAAUG,MAAOA,EAAOC,MAAO,EAA/B,UACE,SAACN,EAAD,CAAkBkB,YAAaA,WAO5C,C","sources":["services/WeatherAPI.js","components/WeatherTabPanel/WeatherTabPanel.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst fetchWeather = async query => {\n  const options = {\n    method: 'GET',\n    url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n    params: { q: `${query}`, days: '3' },\n    headers: {\n      'X-RapidAPI-Key': 'a05c4ca72amshd6999f2c5f785e3p10aaa3jsnfe5969edd877',\n      'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',\n    },\n  };\n\n  const response = await axios(options);\n  return response.data;\n};\n\nexport { fetchWeather };\n","import { useState, useEffect, lazy, Suspense } from 'react';\nimport { Notify } from 'notiflix';\nimport { fetchWeather } from 'services/WeatherAPI';\nimport { Tab, Tabs } from '@mui/material';\nimport Box from 'components/Box';\nimport Loader from 'components/Loader';\n\nconst HourlyWeather = lazy(() => import('../HourlyWeather'));\nconst ThreeDaysWeather = lazy(() => import('../ThreeDaysWeather'));\nconst RealTimeWeather = lazy(() => import('../RealTimeWeather'));\n\nfunction WeatherTabPanel({ query }) {\n  const [value, setValue] = useState(0);\n  const [preLoader, setPreLoader] = useState(false);\n  const [forecastArr, setForecastArr] = useState([]);\n\n  useEffect(() => {\n    const getFetchWeather = async () => {\n      setPreLoader(true);\n      try {\n        const data = await fetchWeather(query);\n        setForecastArr(data);\n        setPreLoader(false);\n      } catch (error) {\n        console.log(error);\n        Notify.failure(\n          'Sorry, there are no city matching your search query. Please try again.'\n        );\n        setPreLoader(false);\n        setForecastArr([]);\n        localStorage.clear();\n      }\n    };\n\n    if (query) {\n      getFetchWeather();\n    }\n  }, [query]);\n\n  const handleTabChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const tabStyles = {\n    color: 'white',\n  };\n\n  return (\n    <Box>\n      <Box\n        as=\"div\"\n        sx={{\n          borderBottom: 1,\n          borderColor: 'divider',\n        }}\n        style={{\n          color: 'white',\n          display: 'flex',\n          justifyContent: 'center',\n          paddingBottom: '10px',\n        }}\n      >\n        <Tabs\n          value={value}\n          onChange={handleTabChange}\n          aria-label=\"basic tabs example\"\n        >\n          <Tab style={tabStyles} label=\"Real time\" />\n          <Tab style={tabStyles} label=\"24h weather\" />\n          <Tab style={tabStyles} label=\"Three days\" />\n        </Tabs>\n      </Box>\n      {preLoader ? (\n        <Loader />\n      ) : (\n        forecastArr.location && (\n          <Suspense fallback={<Loader />}>\n            <TabPanel value={value} index={0}>\n              <RealTimeWeather forecastArr={forecastArr} />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n              <HourlyWeather forecastArr={forecastArr} />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n              <ThreeDaysWeather forecastArr={forecastArr} />\n            </TabPanel>\n          </Suspense>\n        )\n      )}\n    </Box>\n  );\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n    </div>\n  );\n}\n\nexport default WeatherTabPanel;\n"],"names":["fetchWeather","query","options","method","url","params","q","days","headers","axios","response","data","HourlyWeather","lazy","ThreeDaysWeather","RealTimeWeather","TabPanel","props","children","value","index","other","role","hidden","id","Box","sx","p","useState","setValue","preLoader","setPreLoader","forecastArr","setForecastArr","useEffect","getFetchWeather","console","log","Notify","localStorage","clear","tabStyles","color","as","borderBottom","borderColor","style","display","justifyContent","paddingBottom","Tabs","onChange","event","newValue","Tab","label","Loader","location","Suspense","fallback"],"sourceRoot":""}